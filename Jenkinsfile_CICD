pipeline {
    agent any
    
    tools {
        nodejs 'nodejs23'
    }
    
     environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    
    stages {
        stage('Git Checkout') {
            steps {
                git branch: 'dev1', url: 'https://github.com/iam-SivaManikanta/3-Tier-DevSecOps-Mega-Project.git'
            }
        }
        
        stage('Frontend Compilation') {
            steps {
                dir('client'){
                    sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        
        stage('Backend Compilation') {
            steps {
                dir('api') {
                     sh 'find . -name "*.js" -exec node --check {} +'
                }
            }
        }
        
        stage('Git Leaks') {
            steps {
                sh 'gitleaks detect --source ./client --exit-code 1'
                sh 'gitleaks detect --source ./api --exit-code 1'
            }
        }
        
        stage('SonarQube Scan') {
            steps {
                withSonarQubeEnv('sonar') {
                    sh ''' $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=NodeJS-Project \
                    -Dsonar.projectKey=NodeJS-Project '''
                }
            }
        }
        
        stage('Quality check') {
            steps {
                timeout(time: 10, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true, credentialsId: 'sonar-token'
                }
            }
        }
        
        stage('Trivy Scan') {
            steps {
                sh 'trivy fs --format table -o fs-report.html .'
            }
        }
        stage('Build-Tag & Push Backend Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('api') {
                            sh 'docker build -t mani937/backend:latest .'
                            sh 'trivy image --format table -o backend-image-report.html mani937/backend:latest '
                            sh 'docker push mani937/backend:latest'
                           
                        }
                    }
                }
            }
        }  
            
        stage('Build-Tag & Push Frontend Docker Image') {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker-cred') {
                        dir('client') {
                            sh 'docker build -t mani937/frontend:latest .'
                            sh 'trivy image --format table -o frontend-image-report.html mani937/frontend:latest '
                            sh 'docker push mani937/frontend:latest'
                        }
                    }
                }
            }
             
        }  
        stage('Kubernetes Deploy') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: 'LKE-CSI-RSQ', contextName: '', credentialsId: 'k8-token', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: 'https://aeefd1f7-5ef1-4b5c-9c66-61cdc8c6620e.in-maa-1-gw.linodelke.net:443') {
                        sh 'kubectl apply -f k8s-dev/sc.yaml -n dev'
                        sh 'kubectl apply -f k8s-dev/mysql.yaml -n dev'
                        sh 'kubectl apply -f k8s-dev/backend.yaml -n dev'
                        sh 'kubectl apply -f k8s-dev/frontend.yaml -n dev'      
                        sleep 45
                 }
                }
            }
        }
        stage('Kubernetes Verify') {
            steps {
                script {
                    withKubeConfig(caCertificate: '', clusterName: 'LKE-CSI-RSQ', contextName: '', credentialsId: 'k8-token', namespace: 'dev', restrictKubeConfigAccess: false, serverUrl: 'https://aeefd1f7-5ef1-4b5c-9c66-61cdc8c6620e.in-maa-1-gw.linodelke.net:443') {
                        sh 'kubectl get pods -n dev'
                        sh 'kubectl get svc -n dev'
                 }
                }
            }
        }
    }
}
